- name: test whether hda.img exists
  stat:
  args:
    path: "{{hda_img}}"
    get_checksum: False
    get_md5: False
  register: hda_file

- name: download hda.img
  shell: "test -e {{hda_zip}} || curl -L -o {{hda_zip}} 'https://www.dropbox.com/s/6v13efgzmcidgao/hda.zip'"
  args:
    # get_url module doesn't seem to follow redirects, curl just works
    warn: no
  when: hda_file.stat.exists == false

- name: unarchive hda.img
  unarchive: "copy=no src={{hda_zip}} dest={{hda_dir}}"
  when: hda_file.stat.exists == false

- name: delete hda archive
  file: "path={{hda_zip}} state=absent"
  when: hda_file.stat.exists == false

- name: disable SSD monitor
  patch: "src=qemu-monitor-off.patch basedir={{ dest }} strip=1"

- name: disable SSD monitor
  patch: "src=qemu-ubuntu-14.patch basedir={{ dest }} strip=1"

- name: build qemu
  shell: chdir={{ dest }}/eVSSIM/QEMU
      ./configure --enable-io-thread --enable-linux-aio --target-list=x86_64-softmmu --enable-sdl --enable-vssim --extra-cflags='-Wno-error=unused-but-set-variable -Wno-error=deprecated-declarations' --cc=gcc-4.7 && make

- name: ensure QEMU/hw/data exists
  file: path={{ dest }}/eVSSIM/QEMU/hw/data state=directory

- name: mount tmpfs data
  become: true
  mount: fstype=tmpfs opts="size=16g" state=mounted src=tmpfs name={{ dest }}/eVSSIM/QEMU/hw/data

- name: link SSD configuration
  file: path={{ dest }}/eVSSIM/QEMU/hw/data/ssd.conf src=../../../CONFIG/ssd.conf force=yes state=link

# Newer version of SeaBIOS is required to allow booting directly with a Linux kernel image.
- name: overwrite bios.bin
  copy:
  args:
    src: bios.bin
    dest: "{{ dest }}/eVSSIM/QEMU/pc-bios/bios.bin"

- name: copy kernel
  copy:
  args:
    src: "{{kernel_image}}"
    dest: "{{ dest }}/{{kernel_image}}"

- name: copy initrd
  copy:
  args:
    src: "{{initrd_image}}"
    dest: "{{ dest }}/{{initrd_image}}"

# Ensure any old qemu process is stopped

- name: get old qemu pid
  shell: read pid<{{qemu_pid_file}}; if [[ -n "$pid" && -e /proc/$pid/status ]]; then echo $pid; fi
  register: old_qemu_pid_task

- name: shut down old guest
  shell: kill {{old_qemu_pid_task.stdout}}
  when: old_qemu_pid_task.stdout != ""

- name: wait for old guest to shut down
  wait_for: path=/proc/{{old_qemu_pid_task.stdout}}/status state=absent

# Start new qemu process

- name: start guest
  shell: ../x86_64-softmmu/qemu-system-x86_64 -m {{memory}} -smp {{smp}} -hda {{hda_img}} -device nvme -redir tcp:{{guest_ssh_port}}::22 -nographic -vnc :0 -kernel "{{dest}}/{{kernel_image}}" -initrd "{{dest}}/{{initrd_image}}" -append "{{kernel_cmdline}}" -daemonize -pidfile "{{qemu_pid_file}}"
  args:
    chdir: "{{ dest }}/eVSSIM/QEMU/hw"

- name: waiting for guest to start
  wait_for:
  args:
    port: "{{guest_ssh_port}}"
    delay: 30
    search_regex: OpenSSH
    timeout: 10000

- name: ssh into guest
  shell: sshpass -p esd ssh -p "{{guest_ssh_port}}" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no esd@127.0.0.1 uname
  register: guest_uname

# Should display "Linux"

- debug:
  args:
    msg: "Output of 'ssh uname' to guest: {{ guest_uname.stdout }}"

# Shutdown qemu and confirm it has gone down

- name: get existing qemu pid
  shell: read pid<{{qemu_pid_file}}; if [[ -n "$pid" && -e /proc/$pid/status ]]; then echo $pid; fi
  register: qemu_pid_task

- name: shut down guest
  shell: kill {{qemu_pid_task.stdout}}
  when: qemu_pid_task.stdout != ""

- name: wait for guest to shut down
  wait_for: path=/proc/{{qemu_pid_task.stdout}}/status state=absent

- debug: msg="Done running tests on {{ ref }}, target is in {{ dest }}"
